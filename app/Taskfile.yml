version: '3'

tasks:
  test:
    desc: Run app tests
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m unittest discover -s test -p '*_test.py'}

  lint:
    desc: Run app linting
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: pylint --jobs=0 src test}

  build:docker:
    desc: Rebuild app (if changed) from docker compose
    dir: ..
    cmds:
      - docker-compose build app
    sources:
      - ./app/**/*

  start:
    desc: Restart app (and rebuild if changed) from docker compose
    cmds:
      - docker-compose up -d app
    deps:
      - build:docker

  logs:
    desc: Attach to docker compose logs for app
    cmds:
      - docker-compose logs -f app

  start+logs:
    desc: Alias for 'start' followed by 'logs'
    cmds:
      - task: start
      - task: logs

  migration:apply:
    desc: Apply new database changes
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m scripts.migrate}

  migration:rollback:
    desc: Rollback last database change
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m scripts.rollback}

  migration:new:
    desc: Create new database migration
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: "yoyo new ./migrations -m '{{.DESC}}'"}

  populate:
    desc: Fill database with fake data
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m scripts.fill_db}

  exec:docker:
    desc: Execute a command inside an new Docker container instance
    cmds:
      - docker-compose run --rm -T app bash -c "{{.CLI_ARGS}}"
    deps:
      - build:docker
