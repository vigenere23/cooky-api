version: '3'

vars:
  VENV_DIR: .venv
  VENV_ACTIVATE: .venv/bin/activate

tasks:
  venv:setup:
    desc: Creates virtual env and installs dependencies
    cmds:
      - python3 -m venv "{{.VENV_DIR}}"
      - source {{.VENV_ACTIVATE}} && pip install --upgrade pip && pip install -r requirements.txt
    status:
      - test -d "{{.VENV_DIR}}"

  venv:path:
    desc: Displays the virtual env path activation script
    cmds:
      - echo "$PWD/{{.VENV_ACTIVATE}}"
    silent: true
    deps:
      - venv:setup

  test:
    desc: Run app tests
    cmds:
      - task: exec:venv
        vars: {CLI_ARGS: python -m unittest discover -s test -p '*_test.py'}

  lint:
    desc: Run app linting
    cmds:
      - task: exec:venv
        vars: {CLI_ARGS: pylint app}
      - task: exec:venv
        vars: {CLI_ARGS: pylint test}

  build:
    desc: Rebuild app (if changed) from docker compose
    dir: ..
    cmds:
      - docker-compose build app
    sources:
      - ./app/**/*.*

  start:
    desc: Restart app (and rebuild if changed) from docker compose
    dir: ..
    cmds:
      - docker-compose up -d app
    deps:
      - build

  logs:
    desc: Attach to docker compose logs for app
    dir: ..
    cmds:
      - docker-compose logs -f app

  start+logs:
    desc: Alias for 'start' followed by 'logs'
    cmds:
      - task: start
      - task: logs

  migration:apply:
    desc: Apply new database changes
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m app.scripts.migrate}

  migration:rollback:
    desc: Rollback last database change
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m app.scripts.rollback}

  migration:new:
    desc: Create new database migration
    cmds:
      - task: exec:venv # TODO find a way to use this inside Docker
        vars: {CLI_ARGS: "yoyo new ./migrations -m '{{.DESC}}'"}

  populate:
    desc: Fill database with fake data
    cmds:
      - task: exec:docker
        vars: {CLI_ARGS: python -m app.scripts.fill_db}

  exec:docker:
    desc: Execute a command inside the Docker container
    cmds:
      - docker-compose exec -T app "{{.CLI_ARGS}}"
    deps:
      - start

  exec:venv:
    desc: Execute a command inside the Python venv
    cmds:
      - source {{.VENV_ACTIVATE}} && {{.CLI_ARGS}}
    deps:
      - venv:setup
