name: Build (master)

on:
  push:
    branches:
      - master

jobs:
  build-app:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app

    steps:
      - name: Checking out
        uses: actions/checkout@v2

      - name: Setting up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Taskfile
        uses: Arduino/actions/setup-taskfile@master
        with:
          version: '3.x'

      - name: Caching dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Linting
        run: task lint

      - name: Testing
        run: task test


  build-ui:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ui

    steps:
      - name: Checking out
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Caching dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installing dependencies
        run: yarn install --frozen-lockfile

      - name: Linting
        run: yarn lint

      - name: Building
        run: yarn build
